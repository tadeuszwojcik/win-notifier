{"name":"Win-notify","tagline":"Simple notifications API for JavaScript Windows Store apps","body":"#win-notify\r\n\r\n Simple notifications API for JavaScript Windows Store apps.\r\n  \r\n  Compatible with **Windows 8** and **8.1** APIs.\r\n\r\n## Why?\r\n**Short version**: because native WinRT notifications\r\nAPI ([Windows.UI.Notifications](http://msdn.microsoft.com/library/windows/apps/br208661)) \r\nisn't JavaScript friendly(to put it mildly - [see example below](#using-native-winrt-notifications-api)).\r\n\r\n**Longer version**: Everyone who builds Windows Store apps knows that live tiles and toasts notifications \r\nare great way to engage users.\r\nWinRT API provides way to utilize those features, unfortunately it requires messing with \r\nXML (yeah XML - [see example below](#using-native-winrt-notifications-api)) and work with API which is more designed for C#/C++ devs.\r\nI was a bit frustrated by the current state of affairs, so written this lib.\r\nIt's not too abstracted from native WinRT API, \r\nbut provides **much simpler way of working with notifications from Javascript** (at least I hope so).\r\n\r\n\r\n## Installation\r\n\r\n```sh\r\n$ npm install win-notify\r\n```\r\n```sh\r\n$ bower install win-notify\r\n```\r\nor simply copy file win-notify.js file to your project.\r\n\r\n\r\n## Examples \r\n### Tile notifications\r\n\r\n\r\n![tile notifications](https://f.cloud.github.com/assets/1707138/1368882/13e71dee-39c6-11e3-943e-78af855fab64.jpg)\r\n\r\n\r\n\r\nLet's say we want to update tile with text and image when it's displayed on start screen as \r\nwide tile and text only when it's displayed as medium tile:\r\n\r\n<p align=\"center\">\r\n<img src=\"https://f.cloud.github.com/assets/1707138/1392451/4f901d72-3c0b-11e3-9c7a-6825eb33055c.PNG\" />  &nbsp;\r\n<img src=\"https://f.cloud.github.com/assets/1707138/1369086/bbfe889c-39d4-11e3-9c42-ef99011ec09f.png\"/>\r\n\r\n</p>\r\n##### using `win-notify`:\r\n```js\r\nwinNotify.viaTileUpdate({\r\n    tileWide310x150SmallImageAndText04: {\r\n      image1: 'http://uifaces.com/faces/_twitter/cacestgang_73.jpg',\r\n      text1: 'Hello',\r\n      text2: 'World'\r\n    },\r\n    tileSquareText02: {\r\n      text1: 'Hello',\r\n      text2: 'World'\r\n    }\r\n  }\r\n);\r\n```\r\n\r\n##### using native WinRT notifications API:\r\n```js\r\nvar Notifications = Windows.UI.Notifications;\r\nvar Imaging = Windows.Graphics.Imaging;\r\n\r\nvar tileXml = Notifications.TileUpdateManager.getTemplateContent(\r\n  Notifications.TileTemplateType.tileWide310x150SmallImageAndText04);\r\n\r\nvar tileTextAttributes = tileXml.getElementsByTagName(\"text\");\r\ntileTextAttributes[0].appendChild(tileXml.createTextNode(\"Hello\"));\r\ntileTextAttributes[1].appendChild(tileXml.createTextNode(\"World\"));\r\n\r\nvar tileImageAttributes = tileXml.getElementsByTagName(\"image\");\r\ntileImageAttributes[0].setAttribute(\"src\", \"http://uifaces.com/faces/_twitter/cacestgang_73.jpg\");\r\n\r\nvar squareTileXml = Notifications.TileUpdateManager.getTemplateContent(\r\n  Notifications.TileTemplateType.tileSquareText02);\r\n\r\nvar squareTileTextAttributes = squareTileXml.getElementsByTagName(\"text\");\r\nsquareTileTextAttributes[0].appendChild(squareTileXml.createTextNode(\"Hello\"));\r\nsquareTileTextAttributes[1].appendChild(squareTileXml.createTextNode(\"World\"));\r\n\r\nvar node = tileXml.importNode(squareTileXml.getElementsByTagName(\"binding\").item(0), true);\r\ntileXml.getElementsByTagName(\"visual\").item(0).appendChild(node);\r\n\r\nvar tileNotification = new Notifications.TileNotification(tileXml);\r\n\r\nvar tileUpdater = Windows.UI.Notifications.TileUpdateManager.createTileUpdaterForApplication();\r\ntileUpdater.update(tileNotification);\r\n```\r\n\r\nHope you see now which API is **simpler** and why it's worth using `win-notify` in your project.\r\n[Check out API section](#tile-updates) to learn more about details.\r\n\r\n\r\n\r\n### Toast notifications\r\n\r\n\r\n![toast notifications](https://f.cloud.github.com/assets/1707138/1368910/530fa5ca-39c8-11e3-85a3-f75e6f3e80f8.PNG)\r\n\r\n\r\nLet's say we want to show toast notification with text and image:\r\n<p align=\"center\">\r\n<img src=\"https://f.cloud.github.com/assets/1707138/1392452/4fba40ca-3c0b-11e3-8f9f-68147b45b475.PNG\" />\r\n</p>\r\n\r\n##### using `win-notify`:\r\n```js\r\nwinNotify.viaToast({\r\n  toastImageAndText02: {\r\n    text1: 'Hello',\r\n    text2: 'World',\r\n    image1: 'http://uifaces.com/faces/_twitter/cacestgang_73.jpg',\r\n  }\r\n});\r\n```\r\n\r\n##### using native WinRT notifications API:\r\n```js\r\nvar notifications = Windows.UI.Notifications;\r\n\r\nvar template = notifications.ToastTemplateType.toastImageAndText02;\r\nvar toastXml = notifications.ToastNotificationManager.getTemplateContent(template);\r\n\r\nvar toastTextElements = toastXml.getElementsByTagName(\"text\");\r\ntoastTextElements[0].innerText = \"Hello\";\r\ntoastTextElements[1].innerText = \"World\"; \r\n\r\nvar toastImageElements = toastXml.getElementsByTagName(\"image\");\r\ntoastImageElements[0].setAttribute(\"src\", \"http://uifaces.com/faces/_twitter/cacestgang_73.jpg\");\r\n\r\nvar toast = new notifications.ToastNotification(toastXml);\r\nvar toastNotifier = notifications.ToastNotificationManager.createToastNotifier();\r\ntoastNotifier.show(toast);\r\n```\r\n\r\nAgain, `win-notify` is much **simpler** to use than native WinRT notifications API.\r\n[Check out API section](#toasts-notifications) to learn more about details.\r\n\r\n\r\n# API\r\n## Tile updates\r\n#### `winNotify.viaTileUpdate(templatesDefinitions, [optional] options)`\r\nUpdates live tile with new content defined in templates definitions.\r\n##### templatesDefinitions\r\nIt's an object which contains template definition objects and has following structure:\r\n\r\n```js\r\n{\r\n  'templateDefinition': {\r\n     ... template paremeters\r\n  },\r\n  'TemplateDefinition' : {\r\n    ... template parameters\r\n  }\r\n}\r\n```\r\nEvery single `templateDefinition` object needs to named after template name from [tile templates catalog](http://msdn.microsoft.com/en-us/library/windows/apps/hh761491.aspx)\r\n(for example `tileSquare150x150Text04`).\r\nBoth camelCase and PascalCase naming conventions are supported (both `tileSquare150x150Text04` and `TileSquare150x150Text04` will work). \r\nIf you want to send update only for one tile type, specify only one template definition,\r\nif you want to handle more tile types(medium, wide, large etc) specify template definition \r\nfor each of them (it's best practise to send updates to all handled by app tile types, so if your app \r\nsupports wide and medium tiles send update for both).\r\n\r\nWhen you know which template definition from catalog you want to use, `templateDefinition` \r\nobject needs to contain properties which are template's parameters and those can be of `text` or `image` type.\r\n\r\n* `image` - can be simple `string` or `object` with `src`, `alt` and `addImageQuery` properties - \r\n  [see MSDN for more details](http://msdn.microsoft.com/en-us/library/windows/apps/br212855.aspx)\r\n* `text` - can be simple `string` or `object` with `lang` and `text` properties - \r\n  [see MSDN for more details](http://msdn.microsoft.com/en-us/library/windows/apps/br212856.aspx)\r\n\r\nLet's say we want to use template [`TileSquare150x150PeekImageAndText02`](http://msdn.microsoft.com/en-us/library/windows/apps/hh761491.aspx#TileSquarePeekImageAndText02):\r\n\r\nIt has following xml definition:\r\n```xml\r\n<tile>\r\n  <visual version=\"2\">\r\n    <binding template=\"TileSquare150x150PeekImageAndText02\" fallback=\"TileSquarePeekImageAndText02\">\r\n      <image id=\"1\" src=\"image1\" alt=\"alt text\"/>\r\n      <text id=\"1\">Text Field 1 (larger text)</text>\r\n      <text id=\"2\">Text Field 2</text>\r\n    </binding>  \r\n  </visual>\r\n</tile>\r\n```\r\n`Templatedefinition` object for such template looks like:\r\n```js\r\ntileSquare150x150PeekImageAndText02: {\r\n      image1: {\r\n        src:'image1',\r\n        alt:'alt text'\r\n      },\r\n      text1: 'Text Field 1 (larger text)',\r\n      text2: 'Text Field 2'\r\n    }\r\n```\r\nNotice that `image` and `text` properites have proper suffixes which match `id` of element in template xml \r\n(`text1` for text with id=1 etc).\r\n\r\n##### options\r\n\r\nIt's an object with following properties (all optional):\r\n`addImageQuery`, `baseUri`, `branding`, `contentId`, `lang`, `version`\r\nRead more about each of them on [MSDN](http://msdn.microsoft.com/en-us/library/windows/apps/br212857.aspx).\r\n\r\nAdditionalally options object can contain following properties:\r\n* `tag` - gets or sets a `string` that Windows can use to prevent duplicate notification content from appearing in the queue.\r\n* `expirationTime` - gets or sets the time (`DateTime`) that Windows will remove the notification from the tile.\r\n* `tileId` - if not specified tile update will update application tile, if specified it will update **secondary tile**\r\nif secondary tile with `tileId` exists\r\n* `deliveryTime` - gets the time (DateTime) at which the tile is scheduled to be updated (applies only to scheduled tile updates).\r\n* `id` - gets or sets the unique ID that is used to identify the scheduled tile in the schedule (applies only to scheduled tile updates).\r\n* `debug` - if set to true will `console.log` xml output for debugging purposes\r\n\r\n\r\n\r\n\r\n#### `winNotify.viaScheduledTileUpdate(templatesDefinitions, [optional] options)`\r\nSchedules update to live tile with new content defined in templates definition.\r\nBoth `TemplatesDefinitions` and `options` objects are the same as for [`winNotify.viaTileUpdate`](#winnotifyviatileupdatetemplatesdefinitions-optional-options) method.\r\n\r\n#### `winNotify.clearTile([optional] options)`\r\nRemoves all updates and causes the tile to display its default content as declared in the app's manifest.\r\nOptional options object can contain `tileId` property which allows to clear content of secondary tile.\r\n\r\n\r\n\r\n## Toasts notifications\r\n#### `winNotify.viaToast(templatesDefinitions, [optional] options)`\r\nRaises a toast notification.\r\n\r\n\r\n`Templatesdefinitions` object has the same structure as one from [`winNotify.viaTileUpdate`](#winnotifyviatileupdatetemplatesdefinitions-optional-options) method.\r\nOnly template names are changes, and need to match ones\r\nfrom [toasts template catalog] (http://msdn.microsoft.com/en-us/library/windows/apps/hh761494.aspx).\r\n\r\nLet's say we want to use template [`ToastImageAndText04`](http://msdn.microsoft.com/en-us/library/windows/apps/hh761494.aspx#ToastImageAndText04):\r\n\r\nIt has following xml definition:\r\n```xml\r\n<toast>\r\n    <visual>\r\n        <binding template=\"ToastImageAndText04\">\r\n            <image id=\"1\" src=\"image1\" alt=\"image1\"/>\r\n            <text id=\"1\">headlineText</text>\r\n            <text id=\"2\">bodyText1</text>\r\n            <text id=\"3\">bodyText2</text>\r\n        </binding>  \r\n    </visual>\r\n</toast>\r\n```\r\n`Templatedefinition` object for such template looks like:\r\n\r\n```js\r\ntoastImageAndText04: {\r\n      image1: {\r\n        src:'image1',\r\n        alt:'alt text'\r\n      },\r\n      text1: 'headlineText',\r\n      text2: 'bodyText1',\r\n      text3: 'bodyText2'\r\n    }\r\n```\r\n\r\n##### options\r\nOptions from [`winNotify.viaTileUpdate`](#winnotifyviatileupdatetemplatesdefinitions-optional-options) apply here as well, additionally you can specify following properties:\r\n* `onactivated`,`ondismissed`, `onfailed` ([MSDN reference](http://msdn.microsoft.com/en-US/library/windows/apps/windows.ui.notifications.toastnotification#events))\r\n* `launch`, `duration` ([MSDN reference](http://msdn.microsoft.com/en-us/library/windows/apps/br230846.aspx))\r\n* `loop`, `silent` `src` ([MSDN reference](http://msdn.microsoft.com/en-us/library/windows/apps/br230842.aspx))\r\n\r\n#### `winNotify.viaScheduledToast(templatesDefinitions, [optional] options)`\r\nSchedule toast notification that will display at the scheduled time.\r\nBoth `TemplatesDefinitions` and `options` objects are the same as for [`winNotify.viaToast`](#winnotifyviatoasttemplatesdefinition-optional-options) method.\r\n\r\n\r\n## Badge updates\r\n#### `winNotify.viaBadgeUpdate(value, [optional] options)`\r\nUpdates a badge overlay tile.\r\n\r\n\r\n`Value` is a string and defines badge value ([MSDN referene](http://msdn.microsoft.com/en-us/library/windows/apps/br212849.aspx)).\r\n\r\n`Options` object can contain `tileId` property, so badge update will update badge of secondary tile, not main app tile.\r\n\r\n#### `winNotify.clearBadge([optional] options)`\r\nRemoves the badge from the tile.\r\nOptional options object can contain `tileId` property which allows to remove badge of secondary tile.\r\n\r\n## Credits\r\n\r\nThanks Kraig Brockschmidt for images (hope he don't mind) and presentation [Alive with Activity](http://channel9.msdn.com/Events/Build/2013/3-159) explaining notifications concepts in clear way and Microsoft for MSDN docs.\r\n\r\n## License\r\n  [WTFPL](LICENSE.txt)\r\n\r\n\r\n\r\n","google":"UA-17985289-6","note":"Don't delete this file! It's used internally to help with page regeneration."}